Description: ALB And Lambdas
AWSTemplateFormatVersion: '2010-09-09'

Resources:
  LoadBalancerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Load balance allow port 80 traffic
      VpcId: !ImportValue VPCID
      SecurityGroupIngress:
        CidrIp: 0.0.0.0/0
        FromPort: 80
        IpProtocol: TCP
        ToPort: 80

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      SecurityGroups:
        - !Ref LoadBalancerSecGroup
      Subnets:
        - !ImportValue PublicSubnetA
        - !ImportValue PublicSubnetB

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Protocol: HTTP
      LoadBalancerArn: !Ref LoadBalancer
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref LoadBalancerTargetGroup
      Port: 80

  LoadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      TargetType: lambda
      Targets:
        - AvailabilityZone: all
          Id: !GetAtt Lambda.Arn

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: ['sts:AssumeRole']
            Effect: Allow
            Principal:
              Service: ['lambda.amazonaws.com']
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  LambdaFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt Lambda.Arn
      Action: 'lambda:InvokeFunction'
      Principal: elasticloadbalancing.amazonaws.com
      
  Lambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
        import json
                
        def handler(event, context):
          response = {
            "isBase64Encoded": False,
            "headers": {
                'access-control-allow-methods': 'POST',
                'access-control-allow-origin': '*',
                'access-control-allow-headers': 'Content-Type, Access-Control-Allow-Headers'
            }
          }
          if event['httpMethod'] == "POST":
            try:
              body = json.loads(event["body"])
              text = body["text"]
              response["statusCode"] = 200 
              response["body"] = json.dumps({"RECEIVED": text})
            except Exception as e:
              print("ERROR: ", e)
              response["statusCode"] = 400
              response["body"] = json.dumps({"ERROR": "INVALID TEXT PARAM"})
          return response       
      Description: AWS Lambda function
      FunctionName: 'lambda-function'
      Handler: lambda_function.handler
      MemorySize: 256
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.7
      Timeout: 60